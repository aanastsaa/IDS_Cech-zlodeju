-- IDS projekt 2024
-- Cast 4 - SQL skript 
-- Autor: xsamoi00 & xmiron05

-- --------------------------------------------
-- ------------------ Drop --------------------
-- --------------------------------------------

-- Drop check constraints
ALTER TABLE Zlodej DROP CONSTRAINT check_stav;
ALTER TABLE Zlocin DROP CONSTRAINT check_mira_obtiznosti;
ALTER TABLE Typ_Zlocinu DROP CONSTRAINT check_mira_obtiznosti_provedeni;
ALTER TABLE Typ_Zlocinu DROP CONSTRAINT check_mira_obtiznosti_proskoleni;
ALTER TABLE Rajon DROP CONSTRAINT check_pocet_lidi;
ALTER TABLE Rajon DROP CONSTRAINT check_kapacita_zlodeju;
ALTER TABLE Okres DROP CONSTRAINT check_pocet_rajonu;

-- Drop klíčů
ALTER TABLE Zlodej_Zlocin DROP CONSTRAINT FK_Zlodej_Zlocin_Zlodej;
ALTER TABLE Zlodej_Zlocin DROP CONSTRAINT FK_Zlodej_Zlocin_Zlocin;
ALTER TABLE Zlocin_Okres DROP CONSTRAINT FK_Zlocin_Okres_Zlocin;
ALTER TABLE Zlocin_Okres DROP CONSTRAINT FK_Zlocin_Okres_Okres;
ALTER TABLE Zlodej_Vybaveni DROP CONSTRAINT FK_Zlodej_Vybaveni_Zlodej;
ALTER TABLE Zlodej_Vybaveni DROP CONSTRAINT FK_Zlodej_Vybaveni_Vybaveni;

-- Drop vztahu
ALTER TABLE Zlodej DROP CONSTRAINT FK_Zlodej_Povoleni;
ALTER TABLE Zlodej DROP CONSTRAINT FK_Zlodej_TypVybaveni;
ALTER TABLE Zlodej DROP CONSTRAINT FK_Zlodej_TypZlocinu;
ALTER TABLE Zlodej DROP CONSTRAINT FK_Zlodej_Okres;
ALTER TABLE Zlodej DROP CONSTRAINT FK_Zlodej_Rajon;
ALTER TABLE Zlocin DROP CONSTRAINT FK_Zlocin_TypZlocinu;
ALTER TABLE Vybaveni DROP CONSTRAINT FK_Vybaveni_TypVybaveni;
ALTER TABLE Zlocin DROP CONSTRAINT FK_Zlocin_Povoleni;
ALTER TABLE Povoleni DROP CONSTRAINT FK_Povoleni_TypZlocinu;
ALTER TABLE Typ_Zlocinu DROP CONSTRAINT FK_TypZlocinu_TypVybaveni;
ALTER TABLE Rajon DROP CONSTRAINT FK_Rajon_Okres;

-- Drop tabulek
DROP TABLE Zlodej;
DROP TABLE Zlocin;
DROP TABLE Typ_Zlocinu;
DROP TABLE Vybaveni;
DROP TABLE Typ_Vybaveni;
DROP TABLE Okres;
DROP TABLE Rajon;
DROP TABLE Povoleni;
DROP TABLE Zlodej_Zlocin;
DROP TABLE Zlocin_Okres;
DROP TABLE Zlodej_Vybaveni;

-- Drop materializovaneho pohledu
DROP MATERIALIZED VIEW Zlociny;

-- Drop procedur
DROP PROCEDURE PrumerVekuZlodeju;
DROP PROCEDURE AktualizaceStavuZlodeje;

-- --------------------------------------------
-- -----------Vytvoření tabulek----------------
-- --------------------------------------------

CREATE TABLE Zlodej (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    RealneJmeno VARCHAR(50) NOT NULL,
    Prezdivka VARCHAR(50) NOT NULL,
    Vek INT NOT NULL,
    Stav VARCHAR(50) NOT NULL,
    Vypsana_odmena INT NOT NULL,

    -- Provedení vztahu s tabulkami
    Kod_povoleni INT,
    Kod_typu_vybaveni INT,
    Kod_typu_zlocinu INT,
    Kod_rajonu INT,
    Kod_okresu INT
);

CREATE TABLE Zlocin (
    Kod_zlocinu NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Datum DATE NOT NULL,
    Mira_obtiznosti INT NOT NULL,
    Zasazene_koristi VARCHAR(100) NOT NULL,

    -- Provedení vztahu s tabulkami
    Kod_typu_zlocinu INT,
    Kod_povoleni INT
);

CREATE TABLE Typ_Zlocinu (
    Kod_typu_zlocinu NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nazev_typu VARCHAR(100) NOT NULL,
    Popis VARCHAR(100) NOT NULL,
    Mira_obtiznosti_provedeni INT NOT NULL,
    Mira_obtiznosti_proskoleni INT NOT NULL,

    -- Provedení vztahu s tabulkami
    Kod_typu_vybaveni INT
);

CREATE TABLE Vybaveni (
    Kod_vybaveni NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nazev_vybaveni VARCHAR(100) NOT NULL,

    -- Provedení vztahu s tabulkami
    Kod_typu_vybaveni INT
);

CREATE TABLE Typ_Vybaveni (
    Kod_typu_vybaveni NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nazev_typu_vybaveni VARCHAR(100) NOT NULL
);

CREATE TABLE Okres (

    Kod_okresu NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nazev_Okresu VARCHAR(100) NOT NULL,
    Pocet_rajonu INT NOT NULL
);

CREATE TABLE Rajon (
    Kod_rajonu NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Nazev_rajonu VARCHAR(100) NOT NULL,
    Pozice VARCHAR(100) NOT NULL,
    Pocet_lidi INT NOT NULL,
    Celkove_dostupne_bohatstvi VARCHAR(100) NOT NULL,
    Kapacita_zlodeju INT NOT NULL,

    -- Provedení vztahu s tabulkami
    Kod_okresu INT -- Patrí do okresu, dolu je vytvořen vztah

);

CREATE TABLE Povoleni (
    Kod_povoleni NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,

    -- Provedení vztahu s tabulkami
    Kod_typu_zlocinu INT
);

-- --------------------------------------------
-- ------------Vytvoření vztahů----------------
-- --------------------------------------------

-- Vztah mezi tabulkami Zlodej a Povoleni (1...N Zlodej(ů) může mít 0...N Povolení)
ALTER TABLE Zlodej ADD CONSTRAINT FK_Zlodej_Povoleni FOREIGN KEY (Kod_povoleni) REFERENCES Povoleni(Kod_povoleni) ON DELETE SET NULL; 

-- Vztah mezi tabulkami Zlodej a Typ_Vybaveni (0...N Zlodej(ů) může byt proškolen pro 0...N Vybevení)
ALTER TABLE Zlodej ADD CONSTRAINT FK_Zlodej_TypVybaveni FOREIGN KEY (Kod_typu_vybaveni) REFERENCES Typ_Vybaveni(Kod_typu_vybaveni) ON DELETE SET NULL;

-- Vztah mezi tabulkami Zlodej a Typ_Zlocinu (0...N Zlodej(ů) může být proškolen pro 0...N Zlocin(ů))
ALTER TABLE Zlodej ADD CONSTRAINT FK_Zlodej_TypZlocinu FOREIGN KEY (Kod_typu_zlocinu) REFERENCES Typ_Zlocinu(Kod_typu_zlocinu) ON DELETE SET NULL;

-- Vztah mezi tabulkami Zlodej a Okres (0...N Zlodej(ů) může pohybovat v 0...N Okres(ů))
ALTER TABLE Zlodej ADD CONSTRAINT FK_Zlodej_Okres FOREIGN KEY (Kod_okresu) REFERENCES Okres(Kod_okresu) ON DELETE SET NULL;

-- Vztah mezi tabulkami Zlodej a Rajon (0...N Zlodej(ů) eviduje 0...N Rajon(ů))
ALTER TABLE Zlodej ADD CONSTRAINT FK_Zlodej_Rajon FOREIGN KEY (Kod_rajonu) REFERENCES Rajon(Kod_rajonu) ON DELETE SET NULL;

-- Vztah mezi tabulkami Okres a Rajon - Rajon je v okresu, maji vztah Specializace/Generalizace
ALTER TABLE Rajon ADD CONSTRAINT FK_Rajon_Okres FOREIGN KEY (Kod_okresu) REFERENCES Okres(Kod_okresu) ON DELETE SET NULL;

-- Vztah mezi tabulkami Zlocin a Typ_Zlocinu (0...N Zlocin(ů) může mít 1 Typ_Zlocinu)
ALTER TABLE Zlocin ADD CONSTRAINT FK_Zlocin_TypZlocinu FOREIGN KEY (Kod_typu_zlocinu) REFERENCES Typ_Zlocinu(Kod_typu_zlocinu) ON DELETE SET NULL;

-- Vztah mezi tabulkami Vybaveni a Typ_Vybaveni (0...N Vybaveni může mít 1 Typ_Vybaveni)
ALTER TABLE Vybaveni ADD CONSTRAINT FK_Vybaveni_TypVybaveni FOREIGN KEY (Kod_typu_vybaveni) REFERENCES Typ_Vybaveni(Kod_typu_vybaveni) ON DELETE SET NULL;

-- Vztah mezi tabulkami Zlocin a Povoleni (0...1 Zlocin může byt proveden na zakladě 1 Povoleni)
ALTER TABLE Zlocin ADD CONSTRAINT FK_Zlocin_Povoleni FOREIGN KEY (Kod_povoleni) REFERENCES Povoleni(Kod_povoleni) ON DELETE SET NULL;

-- Vztah mezi tabulkami Povoleni a Typ_Zlocinu (0...N Zlocin(ů) může být vydano na 1 Typ_Zlocinu)
ALTER TABLE Povoleni ADD CONSTRAINT FK_Povoleni_TypZlocinu FOREIGN KEY (Kod_typu_zlocinu) REFERENCES Typ_Zlocinu(Kod_typu_zlocinu) ON DELETE SET NULL;

-- Vztah mezi tabulkami Typ_Zlocinu a Typ_Vybaveni (0...N Typ_Zlocinu vyžaduje 0...N Typ_Vybaveni)
ALTER TABLE Typ_Zlocinu ADD CONSTRAINT FK_TypZlocinu_TypVybaveni FOREIGN KEY (Kod_typu_vybaveni) REFERENCES Typ_Vybaveni(Kod_typu_vybaveni) ON DELETE SET NULL;

-- Vztah mezi tabulkami Zlodej a Zlocin (1...N Zlodej(ů) může provest 0...N Zlocin(ů))
CREATE TABLE Zlodej_Zlocin (
    Kod_zlodeje INT NOT NULL,
    Kod_zlocinu INT NOT NULL,
    
    CONSTRAINT PK_Zlodej_Zlocin PRIMARY KEY (Kod_zlodeje, Kod_zlocinu),
    CONSTRAINT FK_Zlodej_Zlocin_Zlodej FOREIGN KEY (Kod_zlodeje) REFERENCES Zlodej(id) ON DELETE SET NULL,
    CONSTRAINT FK_Zlodej_Zlocin_Zlocin FOREIGN KEY (Kod_zlocinu) REFERENCES Zlocin(Kod_zlocinu) ON DELETE SET NULL
);

-- Vztah mezi tabulkami Zlocin a Okres (0...N Zlocin(ů) může byt provedeno v 1...N Okres(ů))
CREATE TABLE Zlocin_Okres (
    Kod_zlocinu INT NOT NULL,
    Kod_okresu INT NOT NULL,
    
    constraint PK_Zlocin_Okres PRIMARY KEY (Kod_zlocinu, Kod_okresu),
    constraint FK_Zlocin_Okres_Zlocin FOREIGN KEY (Kod_zlocinu) REFERENCES Zlocin(Kod_zlocinu) ON DELETE SET NULL,
    constraint FK_Zlocin_Okres_Okres FOREIGN KEY (Kod_okresu) REFERENCES Okres(Kod_okresu) ON DELETE SET NULL
);

-- vztah mezi tabulkami Zlodej a Vybaveni (0...1 Zlodej(ů) může vlastnit 0...N Vybavení a musí mít obdobi vlastnosti (datum_od, datum_do))
CREATE TABLE Zlodej_Vybaveni (
    Kod_zlodeje INT NOT NULL,
    Kod_vybaveni INT NOT NULL,
    Datum_od DATE NOT NULL,
    Datum_do DATE NOT NULL,
    
    CONSTRAINT PK_Zlodej_Vybaveni PRIMARY KEY (Kod_zlodeje, Kod_vybaveni, Datum_od, Datum_do),
    CONSTRAINT FK_Zlodej_Vybaveni_Zlodej FOREIGN KEY (Kod_zlodeje) REFERENCES Zlodej(id) ON DELETE SET NULL,
    CONSTRAINT FK_Zlodej_Vybaveni_Vybaveni FOREIGN KEY (Kod_vybaveni) REFERENCES Vybaveni(Kod_vybaveni) ON DELETE SET NULL
);

-- ---------------------------------------------------------
-- ----------------Check constraints------------------------
-- ---------------------------------------------------------

-- Check constraint pro tabulku Zlodej
ALTER TABLE Zlodej ADD CONSTRAINT check_stav CHECK (Stav IN ('zivy', 'mrtvy', 'důchodce'));

-- Check constraint pro tabulku Zlocin
ALTER TABLE Zlocin ADD CONSTRAINT check_mira_obtiznosti CHECK (Mira_obtiznosti BETWEEN 1 AND 10);

-- Check constraint pro tabulku Typ_Zlocinu
ALTER TABLE Typ_Zlocinu ADD CONSTRAINT check_mira_obtiznosti_provedeni CHECK (Mira_obtiznosti_provedeni BETWEEN 1 AND 10);

-- Check constraint pro tabulku Typ_Zlocinu
ALTER TABLE Typ_Zlocinu ADD CONSTRAINT check_mira_obtiznosti_proskoleni CHECK (Mira_obtiznosti_proskoleni BETWEEN 1 AND 10);

-- Check constraint pro tabulku Rajon
ALTER TABLE Rajon ADD CONSTRAINT check_pocet_lidi CHECK (Pocet_lidi > 0);

-- Check constraint pro tabulku Rajon
ALTER TABLE Rajon ADD CONSTRAINT check_kapacita_zlodeju CHECK (Kapacita_zlodeju > 0);

-- Check constraint pro tabulku Okres
ALTER TABLE Okres ADD CONSTRAINT check_pocet_rajonu CHECK (Pocet_rajonu > 0);


-- ---------------------------------------------------------
-- ----------------Triggers-----------------------------------
-- ---------------------------------------------------------

-- Trigger pro kontrolu výše odměny se souladem s zlocinem, pokud zlodej nema zlocin, tak vypsana odmena nemusi byt vyssi nez 3000, 
-- pokud ma zlocin, tak musi byt vyssi nez (pocet zlocinu) * 10000
CREATE OR REPLACE TRIGGER VypsanaOdmenaTrigger
BEFORE INSERT OR UPDATE ON Zlodej
FOR EACH ROW
BEGIN
    DECLARE
        v_PocetZlocinu INT;
    BEGIN
        SELECT COUNT(*) INTO v_PocetZlocinu FROM Zlodej_Zlocin WHERE Kod_zlodeje = :NEW.id;
        IF v_PocetZlocinu = 0 AND :NEW.Vypsana_odmena > 3001 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Vypsana odmena nesmi byt 3000 nebo vyssi.');
        ELSIF :NEW.Vypsana_odmena < v_PocetZlocinu * 10000 THEN
            RAISE_APPLICATION_ERROR(-20000, 'Vypsana odmena musi byt vyssi nez 9999' || v_PocetZlocinu * 10000);
        END IF;
    END;
END;
/

-- kontrola, ze zlodej je proskolen pro zlocin, ktery chce provest a ma na to povoleni
CREATE OR REPLACE TRIGGER ProvedeniZlocinuTrigger
BEFORE INSERT OR UPDATE ON Zlocin
FOR EACH ROW
BEGIN
    DECLARE
        v_Proskolen INT;
        v_TypZlodej INT;
        v_Povoleni_Zlodej INT;
        v_Povoleni INT;
    BEGIN
        SELECT Kod_typu_zlocinu INTO v_Proskolen FROM Typ_Zlocinu WHERE Kod_typu_zlocinu = :NEW.Kod_typu_zlocinu;
        SELECT Kod_typu_zlocinu INTO v_TypZlodej FROM Zlodej WHERE id = :NEW.Kod_povoleni;
        SELECT Kod_povoleni INTO v_Povoleni_Zlodej FROM Zlodej WHERE id = :NEW.Kod_povoleni;
        SELECT Kod_povoleni INTO v_Povoleni FROM Povoleni WHERE Kod_povoleni = v_Povoleni_Zlodej;
        IF v_Povoleni != v_Povoleni_Zlodej OR v_Proskolen != v_TypZlodej THEN
            RAISE_APPLICATION_ERROR(-20000, 'Zlodej neni proskolen pro tento zlocin nebo nema na to povoleni.');
        END IF;
    END;
END;
/

-- ---------------------------------------------------------
-- -----------------Inserts---------------------------------
-- ---------------------------------------------------------

-- Insert do tabulky Typ_Vybaveni
INSERT INTO Typ_Vybaveni (Nazev_typu_vybaveni) VALUES ('Zbraně');
INSERT INTO Typ_Vybaveni (Nazev_typu_vybaveni) VALUES ('Nástroje');

-- Insert do tabulky Typ_Zlocinu
INSERT INTO Typ_Zlocinu (Nazev_typu, Popis, Mira_obtiznosti_provedeni, Mira_obtiznosti_proskoleni, Kod_typu_vybaveni) VALUES ('Loupež', 'Získání cenných předmětů', 8, 5, 1);
INSERT INTO Typ_Zlocinu (Nazev_typu, Popis, Mira_obtiznosti_provedeni, Mira_obtiznosti_proskoleni, Kod_typu_vybaveni) VALUES ('Vandalismus', 'Ničení veřejného majetku', 3, 2, 2);

-- Insert do tabulky Typ_Vybaveni
INSERT INTO Vybaveni (Nazev_vybaveni, Kod_typu_vybaveni) VALUES ('Pistole', 1);
INSERT INTO Vybaveni (Nazev_vybaveni, Kod_typu_vybaveni) VALUES ('Kladivo', 2);

-- Insert do tabulky Typ_Zlocinu
INSERT INTO Typ_Zlocinu (Nazev_typu, Popis, Mira_obtiznosti_provedeni, Mira_obtiznosti_proskoleni, Kod_typu_vybaveni) VALUES ('Loupež', 'Získání cenných předmětů', 8, 5, 1);
INSERT INTO Typ_Zlocinu (Nazev_typu, Popis, Mira_obtiznosti_provedeni, Mira_obtiznosti_proskoleni, Kod_typu_vybaveni) VALUES ('Vandalismus', 'Ničení veřejného majetku', 3, 2, 2);

-- Insert do tabulky Okres
INSERT INTO Okres (Nazev_Okresu, Pocet_rajonu) VALUES ('Brno', 3);
INSERT INTO Okres (Nazev_Okresu, Pocet_rajonu) VALUES ('Praha', 5);

-- Insert do tabulky Rajon
INSERT INTO Rajon (Nazev_rajonu, Pozice, Pocet_lidi, Celkove_dostupne_bohatstvi, Kapacita_zlodeju, Kod_okresu) VALUES ('Brno - centrum', 'střed města', 100, '1000000', 10, 1);
INSERT INTO Rajon (Nazev_rajonu, Pozice, Pocet_lidi, Celkove_dostupne_bohatstvi, Kapacita_zlodeju, Kod_okresu) VALUES ('Brno - sever', 'sever města', 50, '500000', 5, 1);

-- Insert do tabulky Povoleni
INSERT INTO Povoleni (Kod_typu_zlocinu) VALUES (1);
INSERT INTO Povoleni (Kod_typu_zlocinu) VALUES (2);

-- Insert do tabulky Zlodej
INSERT INTO Zlodej (RealneJmeno, Prezdivka, Vek, Stav, Vypsana_odmena, Kod_povoleni, Kod_typu_vybaveni, Kod_typu_zlocinu, Kod_rajonu, Kod_okresu) VALUES ('Jan Novák', 'Hnědý', 25, 'zivy', 3000, 1, 1, 1, 1, 1);
INSERT INTO Zlodej (RealneJmeno, Prezdivka, Vek, Stav, Vypsana_odmena, Kod_povoleni, Kod_typu_vybaveni, Kod_typu_zlocinu, Kod_rajonu, Kod_okresu) VALUES ('Petr Novotný', 'Zelený', 30, 'zivy', 3000, 2, 2, 2, 2, 2);
INSERT INTO Zlodej (RealneJmeno, Prezdivka, Vek, Stav, Vypsana_odmena, Kod_povoleni, Kod_typu_vybaveni, Kod_typu_zlocinu, Kod_rajonu, Kod_okresu) VALUES ('Jana Nováková', 'Modrý', 40, 'zivy', 1000, 1, 1, 1, 1, 1);

-- Insert do tabulky Zlodej_Vybaveni
INSERT INTO Zlodej_Vybaveni (Kod_zlodeje, Kod_vybaveni, Datum_od, Datum_do) VALUES (1, 1, TO_DATE('2021-01-01', 'YYYY-MM-DD'), TO_DATE('2021-12-31', 'YYYY-MM-DD'));
INSERT INTO Zlodej_Vybaveni (Kod_zlodeje, Kod_vybaveni, Datum_od, Datum_do) VALUES (2, 2, TO_DATE('2021-01-01', 'YYYY-MM-DD'), TO_DATE('2021-12-31', 'YYYY-MM-DD'));

-- Insert do tabulky Zlocin
INSERT INTO Zlocin (Datum, Mira_obtiznosti, Zasazene_koristi, Kod_typu_zlocinu, Kod_povoleni) 
VALUES (TO_DATE('2021-01-01', 'YYYY-MM-DD'), 8, '10000', 1, 1);

INSERT INTO Zlocin (Datum, Mira_obtiznosti, Zasazene_koristi, Kod_typu_zlocinu, Kod_povoleni) 
VALUES (TO_DATE('2021-02-02', 'YYYY-MM-DD'), 3, '50000', 2, 2);

INSERT INTO Zlocin (Datum, Mira_obtiznosti, Zasazene_koristi, Kod_typu_zlocinu, Kod_povoleni) 
VALUES (TO_DATE('2021-03-03', 'YYYY-MM-DD'), 5, '70000', 1, 1);

-- Insert do tabulky Zlodej_Zlocin
INSERT INTO Zlodej_Zlocin (Kod_zlodeje, Kod_zlocinu) VALUES (1, 1);
INSERT INTO Zlodej_Zlocin (Kod_zlodeje, Kod_zlocinu) VALUES (2, 2);
INSERT INTO Zlodej_Zlocin (Kod_zlodeje, Kod_zlocinu) VALUES (1, 3);

-- Update v tabulce Zlodej pro výpočet vypsání odměny
UPDATE Zlodej SET Vypsana_odmena = 20 WHERE id = 1;
UPDATE Zlodej SET Vypsana_odmena = 10000 WHERE id = 2;

SELECT * FROM Zlodej;

-- ---------------------------------------------------------
-- -----------------Procedure-------------------------------
-- ---------------------------------------------------------

-- První uložená procedura: Výpočet průměrného věku zlodějů v daném rajónu
CREATE OR REPLACE PROCEDURE PrumerVekuZlodeju (
    p_RajonID IN Rajon.Kod_rajonu%TYPE,
    p_Prumer OUT NUMBER
)
IS
    totalAge NUMBER := 0;
    numThieves NUMBER := 0;
BEGIN
    -- Otevření kurzoru pro výběr zlodějů v daném rajónu
    FOR thief IN (SELECT Vek FROM Zlodej WHERE Kod_rajonu = p_RajonID) LOOP
        totalAge := totalAge + thief.Vek;
        numThieves := numThieves + 1;
    END LOOP;

    -- Výpočet průměrného věku
    IF numThieves > 0 THEN
        p_Prumer := totalAge / numThieves;
    ELSE
        p_Prumer := 0; -- Pokud není žádný zloděj v rajónu
    END IF;
END PrumerVekuZlodeju;
/

-- Příklad volání první uložené procedury
DECLARE
    prumerVeku NUMBER;
BEGIN
    PrumerVekuZlodeju(1, prumerVeku); -- Zde se předává ID rajónu
    DBMS_OUTPUT.PUT_LINE('Průměrný věk zlodějů v rajónu je: ' || prumerVeku);
END;
/

-- Druhá uložená procedura: Aktualizace stavu zloděje na základě věku
CREATE OR REPLACE PROCEDURE AktualizaceStavuZlodeje (
    p_ZlodejID IN Zlodej.id%TYPE
)
IS
    v_Vek Zlodej.Vek%TYPE;
    v_NovyStav Zlodej.Stav%TYPE;
BEGIN
    -- Získání věku zloděje
    SELECT Vek INTO v_Vek FROM Zlodej WHERE id = p_ZlodejID;

    -- Aktualizace stavu na základě věku
    IF v_Vek >= 60 THEN
        v_NovyStav := 'důchodce';
    ELSE
        v_NovyStav := 'zivy';
    END IF;

    -- Aktualizace stavu zloděje
    UPDATE Zlodej SET Stav = v_NovyStav WHERE id = p_ZlodejID;
    COMMIT; -- Potvrzení transakce
END AktualizaceStavuZlodeje;
/

-- Příklad volání druhé uložené procedury
BEGIN
    AktualizaceStavuZlodeje(1); -- Zde se předává ID zloděje
    DBMS_OUTPUT.PUT_LINE('Stav zloděje byl aktualizován.');
END;
/

-- ---------------------------------------------------------
-- -----------Materializovany pohled------------------------
-- ---------------------------------------------------------

CREATE MATERIALIZED VIEW Zlociny AS
SELECT Zlocin.Kod_zlocinu, Zlocin.Datum, Zlocin.Mira_obtiznosti, Zlocin.Zasazene_koristi, Typ_Zlocinu.Nazev_typu,
    COUNT(Zlocin.Kod_zlocinu) AS Pocet_zlocinu
FROM Zlocin
JOIN Typ_Zlocinu ON Zlocin.Kod_typu_zlocinu = Typ_Zlocinu.Kod_typu_zlocinu
GROUP BY Zlocin.Kod_zlocinu, Zlocin.Datum, Zlocin.Mira_obtiznosti, Zlocin.Zasazene_koristi, Typ_Zlocinu.Nazev_typu;

SELECT * FROM Zlociny;

UPDATE Zlocin SET Mira_obtiznosti = 10 WHERE Kod_zlocinu = 1;
UPDATE Zlocin SET Zasazene_koristi = '20000' WHERE Kod_zlocinu = 1;

SELECT * FROM Zlociny;

-- ---------------------------------------------------------
-- -----------------SELECT---------------------------------
-- ---------------------------------------------------------

WITH Pripravene_Zlociny AS (
    SELECT 
        Zlocin.Kod_zlocinu,
        Zlocin.Datum,
        Zlocin.Mira_obtiznosti,
        Zlocin.Zasazene_koristi,
        Typ_Zlocinu.Nazev_typu AS Typ_Zlocinu_Nazev,
        CASE
            WHEN Zlocin.Mira_obtiznosti <= 3 THEN 'Nízká obtížnost'
            WHEN Zlocin.Mira_obtiznosti > 3 AND Zlocin.Mira_obtiznosti <= 7 THEN 'Střední obtížnost'
            ELSE 'Vysoká obtížnost'
        END AS Obtiznost
    FROM 
        Zlocin
    INNER JOIN Typ_Zlocinu ON Zlocin.Kod_typu_zlocinu = Typ_Zlocinu.Kod_typu_zlocinu
)
SELECT * FROM Pripravene_Zlociny;

-- ---------------------------------------------------------
-- -------------------EXPLAIN PLAN--------------------------
-- ---------------------------------------------------------

SET SERVEROUTPUT ON;


-- EXPLAIN PLAN FOR 
EXPLAIN PLAN FOR
SELECT Typ_Zlocinu.Nazev_typu, COUNT(Zlocin.Kod_zlocinu) AS "Number of Crimes"
FROM Zlocin
JOIN Typ_Zlocinu ON Zlocin.Kod_typu_zlocinu = Typ_Zlocinu.Kod_typu_zlocinu
GROUP BY Typ_Zlocinu.Nazev_typu;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- Explain plan pro vytvoření indexu
CREATE INDEX idx_Zlocin_Kod_typu_zlocinu ON Zlocin(Kod_typu_zlocinu);

EXPLAIN PLAN FOR
SELECT Typ_Zlocinu.Nazev_typu, COUNT(Zlocin.Kod_zlocinu) AS "Number of Crimes"
FROM Zlocin
JOIN Typ_Zlocinu ON Zlocin.Kod_typu_zlocinu = Typ_Zlocinu.Kod_typu_zlocinu
GROUP BY Typ_Zlocinu.Nazev_typu;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

-- Drop indexu
DROP INDEX idx_Zlocin_Kod_typu_zlocinu;

-- ---------------------------------------------------------
-- -------------------DEFENICE PRAV-------------------------
-- ---------------------------------------------------------

GRANT ALL ON Zlodej TO xmiron05;
GRANT ALL ON Zlocin TO xmiron05;
GRANT ALL ON Typ_Zlocinu TO xmiron05;
GRANT ALL ON Vybaveni TO xmiron05;
GRANT ALL ON Typ_Vybaveni TO xmiron05;
GRANT ALL ON Okres TO xmiron05;
GRANT ALL ON Rajon TO xmiron05;
GRANT ALL ON Povoleni TO xmiron05;
GRANT ALL ON Zlodej_Zlocin TO xmiron05;
GRANT ALL ON Zlocin_Okres TO xmiron05;
GRANT ALL ON Zlodej_Vybaveni TO xmiron05;

GRANT ALL ON Zlociny TO xmiron05;

GRANT EXECUTE ON PrumerVekuZlodeju TO xmiron05;
GRANT EXECUTE ON AktualizaceStavuZlodeje TO xmiron05;